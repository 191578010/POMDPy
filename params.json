{"name":"POMDPy","tagline":"A framework for implementing discrete or continuous POMDPs in Python. Monte-Carlo Tree Search is used as the default POMDP solver (modeled after the popular POMCP solver).","body":"This open-source project contains a framework for implementing discrete or continuous POMDPs in Python. The organization of the code was inspired by [TAPIR](http://robotics.itee.uq.edu.au/~hannakur/dokuwiki/doku.php?id=wiki:tapir) and the [POMCP](http://www0.cs.ucl.ac.uk/staff/D.Silver/web/Applications.html) algorithm.\r\n\r\nThis is project has been conducted strictly for research purposes. If you would like to contribute to POMDPy or if you have any comments or suggestions, feel free to send me a pull request or send me an email at pemami@ufl.edu.  \r\n\r\n## Belief Tree structure ##\r\n\r\nParent BeliefNode -> ActionMapping -> ActionMappingEntry -> ActionNode -> ObservationMap -> ObservationMappingEntry -> Child BeliefNode\r\n\r\n## Dependencies ##\r\n\r\nThis project uses:\r\n* Python 2.7.9\r\n* numpy 1.9.2\r\n* matplotlib 1.4.3\r\n* pytest 2.7.0\r\n\r\n## TODO ##\r\n* Unit Test coverage is currently minimal, so this area is going to be expanded upon soon\r\n* The only current \"working\" test-problem is RockSample. More test problems are being worked on \r\n* An extension for GPU-MCTS is being planned. The NumbaPro Python module seems to be a good bet for this","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}